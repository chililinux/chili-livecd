#!/bin/bash
#source /lib/lsb/init-functions
#source /usr/share/fetch/core.sh
#usermod -d /home/new_user -m user
#usermod -l new_user user

#debug
#export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

#global system
app_name="${0##*/}"
CREATESFS=1
trap "exit 1" SIGHUP SIGINT SIGQUIT SIGTERM
set -e

sh_configure()
{
	##########################################################
	DISTRONAME="CHILI"
	LFSVERSION="live"
	LFS=/lfs
	LFSBASENAME=lfs.hd256
	##########################################################
	COMPRESSION="gzip"
	_VERSION='5.17.2-chili'
	ARCH="x86_64"
	ORIGEM="$LFS/$LFSBASENAME"
	LOCALDIR="$PWD"
	TEMPDIR="/livecd/live/${LFSBASENAME}"
	ISOLINUXDIR="$LOCALDIR/isolinux"
	ANOMES=$(date +"%Y%m")
	ANOMESDIA=$(date +"%Y.%m.%d")
	VOL_ID="${DISTRONAME}_${ANOMES}"
	OUTPUT_ISO="$DISTRONAME-$LFSVERSION-$LFSBASENAME-$ANOMESDIA-$ARCH.iso"
	#isolinux_files="chain.c32 isolinux.bin ldlinux.c32 libutil.c32 reboot.c32 menu.c32 vesamenu.c32 isohdpfx.bin isolinux.cfg libcom32.c32 poweroff.c32 efi.img chili10.jpg"
	KERNEL="${ORIGEM}/boot/vmlinuz-$_VERSION"
	INITRD="${ORIGEM}/boot/initrd-$_VERSION.img"
	DESTKERNEL="$TEMPDIR/boot/vmlinuz"
	DESTINITRD="$TEMPDIR/boot/initrd"
}

setvarcolors()
{
   if tput setaf 1 &> /dev/null; then
      tput sgr0; # reset colors
      #bold=$(tput bold);
      reset=$(tput sgr0);
      #blue=$(tput setaf 33);
      cyan=$(tput setaf 37);
      green=$(tput setaf 2);
      orange=$(tput setaf 166);
      #purple=$(tput setaf 125);
      red=$(tput setaf 124);
      #violet=$(tput setaf 61);
      white=$(tput setaf 15);
      yellow=$(tput setaf 136);
      pink=$(tput setaf 129);
      #black=$(tput setaf 0);
   else
      #bold='';
      reset="\e[0m";
      reset="\e[0m";
      #blue="\e[1;34m";
      cyan="\e[1;36m";
      green="\e[1;32m";
      orange="\e[1;33m";
      #purple="\e[1;35m";
      red="\e[1;31m";
      #violet="\e[1;35m";
      white="\e[1;37m";
      yellow="\e[1;33m";
      pink="\033[35;1m";
      #black="\e[1;30m";
   fi
}

# $1: message string
_msg_info()
{
	local _msg="${1}"
	[[ "${quiet}" == "y" ]] || printf '[%s] INFO: %s\n' "${cyan}${app_name}${reset}" "${_msg}"
}

# $1: message string
_msg_warning() {
    local _msg="${1}"
    printf '[%s] WARNING: %s\n' "${app_name}" "${_msg}" >&2
}

# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
    local _msg="${1}"
    local _error="${2}"
    printf '[%s] ERROR: %s\n' "${app_name}" "${_msg}" >&2
    if (( _error > 0 )); then
        exit "${_error}"
    fi
}

sh_ambiente()
{
	local lnotexist=0

	_msg_info "Criando ISO: ${yellow}$OUTPUT_ISO${reset}"
	_msg_info "LABEL  : ${yellow}$VOL_ID${reset}"
	_msg_info "ORIGEM : ${orange}$ORIGEM${reset}"
	_msg_info "DESTINO: ${orange}$TEMPDIR/filesystem/root.sfs${reset}"

	_msg_info "Criando diretorio temporario $TEMPDIR"
 	[[ -d "$TEMPDIR" ]] ||	lnotexist=1
 	[[ -d "$TEMPDIR" ]] ||	mkdir -p "$TEMPDIR"/{filesystem,isolinux,boot,boot/grub,efi/boot}

	_msg_info "Copiando alguns necessarios arquivos..."
#	for file in $isolinux_files; do
#		cp $ISOLINUXDIR/$file $TEMPDIR/isolinux
#	done
#	cp $ISOLINUXDIR/efiboot.img $TEMPDIR/isolinux
#	cp $LOCALDIR/model/efi/boot/bootx64.efi $TEMPDIR/efi/boot

	if (( lnotexist ))
	then
		cp -rpn "$LOCALDIR"/model/. "$TEMPDIR"/.
	fi

	echo "$DISTRONAME" > "$TEMPDIR/isolinux/venomlive"
	[ -d livecd/virootfs ] && cp -aR livecd/virootfs "$TEMPDIR"

	_msg_info "Copiando kernel $KERNEL to $DESTKERNEL"
	cp -f "$KERNEL" "$TEMPDIR/boot/vmlinuz"
	#rm -f $LFS/boot/vmlinuz

	_msg_info "Copiando initrd $INITRD to $DESTINITRD"
	cp -f "$INITRD" "$TEMPDIR/boot/initrd"
	#cp -f $INITRD $LFS/boot/
	#rm -f $LFS/boot/initrd

	#pushd $LFS/boot &>/dev/null
	#ln -sf vmlinuz-$(uname -r) vmlinuz
	#ln -sf initrd-$(uname -r).img initrd
	#popd &>/dev/null
}

info()
{
#  dialog                     \
   whiptail                   \
   	--fb  						\
      --title     "[debug]$0" \
      --backtitle "[debug]$0"	\
      --yesno     "${*}\n" 	\
   0 0
   result=$?
   if (( result )); then
      exit
   fi
   return $result
}

sh_mksquashfs()
{
 	if [[ -e "$TEMPDIR/filesystem/root.sfs" ]]; then
		_msg_info "Removendo OLD file squashfs root.sfs..."
		rm -f $TEMPDIR/filesystem/root.sfs
	fi

#	info "  ORIGEM : $ORIGEM\n" "DESTINO : $TEMPDIR/filesystem/root.sfs"

	case $COMPRESSION in
		gzip)	mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -comp gzip -Xcompression-level 1;;
		xz)	mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1048576 -comp xz -Xdict-size 100%;;
		zstd)	mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1M -comp zstd -Xcompression-level 1;;
		lzma)	mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1M -comp lzma;;
	   lz4)	mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1M -comp lz4 -Xhc;;
   esac
}

sh_mkiso()
{
 	if ! [[ -d "out" ]]; then
 		mkdir -p out
 	fi

 	if [[ -e "$OUTPUT_ISO" ]]; then
		_msg_info "Excluindo .iso antigo..."
		rm -f "$OUTPUT_ISO"
	fi
	_msg_info "Criando iso $OUTPUT_ISO..."

	#MBR
	#xorriso -as mkisofs                                 \
	#		-r -J -joliet-long                          \
	#		-l -cache-inodes                            \
	#		-isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	#		-partition_offset 16                        \
	#       -iso-level 3                                \
	#		-volid "${VOL_ID}"                           \
	#		-b isolinux/isolinux.bin                    \
	#		-c isolinux/boot.cat                        \
	#		-no-emul-boot                               \
	#		-boot-load-size 4                           \
	#		-boot-info-table                            \
	#		-o $OUTPUT_ISO                              \
	#		$TEMPDIR

	#hibrido MBR/EFI
	# "-boot-load-size 4 -boot-info-table" deve ser escrito antes de "-eltorito-alt-boot", porque eles servem como opções de modificação para "-b". 
	# Depois de "-eltorito-alt-boot" vem o reino de "-e". 
	# Lá você precisa de outra opção "-no-emul-boot" (como em "-b") para evitar a mensagem de erro sobre tamanhos de emulação de disquete. 
	# Mas não use "-boot-load-size" ou "-boot-info-table" para a imagem EFI
	#xorriso -as mkisofs -r                              \
	#		-J -l -b isolinux/isolinux.bin             \
	#		-c isolinux/boot.cat                        \
	#		-no-emul-boot                               \
	#		-isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	#       -eltorito-alt-boot                          \
	#		-no-emul-boot                               \
	#       -e isolinux/efiboot.img                     \
	#       -no-emul-boot                               \
	#        -isohybrid-gpt-basdat                       \
	#		-volid "${VOL_ID}"                           \
	#		-o $OUTPUT_ISO                              \
	#		$TEMPDIR

   #xorriso -as mkisofs \
   #  -o $OUTPUT_ISO \
   #  -isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
   #  -c isolinux/boot.cat \
   #  -b isolinux/isolinux.bin \
   #   -no-emul-boot -boot-load-size 4 -boot-info-table \
   #  -eltorito-alt-boot \
   #  -e isolinux/efi.img \
   #   -no-emul-boot \
   #   -isohybrid-gpt-basdat \
   #   $TEMPDIR

	xorriso -as mkisofs \
	  -o "out/$OUTPUT_ISO" \
	  -isohybrid-mbr "$ISOLINUXDIR/isohdpfx.bin"    \
	  -c isolinux/boot.cat \
	  -c isolinux/boot.cat \
	  -b isolinux/isolinux.bin \
	  -no-emul-boot -boot-load-size 4 -boot-info-table \
	  -eltorito-alt-boot \
	  -e isolinux/efi.img \
     -no-emul-boot \
     -isohybrid-gpt-basdat \
		-iso-level 3 \
		-full-iso9660-filenames \
		-joliet \
		-joliet-long \
		-rational-rock \
		-volid "${VOL_ID}" \
	  $TEMPDIR

	#rm -fr $TEMPDIR
	_msg_info "Arquivo iso ${red}$PWD/out/$OUTPUT_ISO${reset} criado com sucesso!"
}

init()
{
   case "${1}" in
      --no)    CREATESFS=0;;
      --yes)	CREATESFS=1;;
      *) 	  	shift;help "$@";;
   esac
}

usage()
{
   echo -e "${orange}uso${green}:${white}  ${app_name} ${green}<${white}operação${green}> [${white}...${green}]${reset}"
   echo -e "operações:"
   echo -e "${pink}  -h${cyan}, display this help and exit"
   echo -e "${pink}  -n${cyan}, NAO cria squashfs, usa antigo"
   echo -e "${pink}  -y${cyan}, cria novo squashfs"
   echo -e "${pink}  -x${cyan}, usa compression XZ"
   echo -e "${pink}  -z${cyan}, usa compression ZSTD"
   echo -e "${pink}  -g${cyan}, usa cmpression GZIP (default)"
   echo -e "${pink}  -q${cyan}, quiet"
	exit 1
}

setvarcolors
#if [[ $1 = "" ]] || [[ $1 = "-h" ]] || [[ $1 = "--help" ]] || [[ $1 = "help" ]] || [[ $1 = "-help" ]]; then
#   help
#fi

while getopts "yYnNhHxXzZgGqQ" o; do
    case "${o}" in
    	q|Q)		quiet='y';;
    	y|Y)		CREATESFS=1;;
      n|N)		CREATESFS=0;;
      x|X)		COMPRESSION="xz";;
      z|Z) 		COMPRESSION="zstd";;
      g|G) 		COMPRESSION="gzip";;
      h|H)		usage;;
      *)			usage;;
    esac
done
shift $((OPTIND-1))

if (( EUID != 0 )); then
	_msg_error "${app_name} must be run as root." 1
fi

sh_configure
#init $*
sh_ambiente
if (( CREATESFS )); then
	sh_mksquashfs
else
 	if ! [[ -e "$TEMPDIR/filesystem/root.sfs" ]]; then
		_msg_info "filesystem squashfs nao localizado, reconstruindo..."
		_msg_info
	else
		_msg_info "Pulando filesystem squashfs..."
	fi
fi
sh_mkiso
