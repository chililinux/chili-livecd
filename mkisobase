#!/bin/bash
. /lib/lsb/init-functions

trap "exit 1" SIGHUP SIGINT SIGQUIT SIGTERM

ARCH="x86_64"
LFSVERSION="base"
LFS=/lfs/base
LOCALDIR=$PWD
TEMPDIR=/livecd/lfsbase
ISOLINUXDIR=$LOCALDIR/isolinux
DISTRONAME="CHILIOS"
DIAMES=$(date +"%Y%d")
ANOMESDIA=$(date +"%Y.%m.%d")
VOL_ID="CHILIOS_${DIAMES}"
LABEL="ChiliOS"
DIAHORA=`date +"%d%m%Y-%T" | sed 's/://g'`
OUTPUT_ISO="ChiliOS-$LFSVERSION-$ANOMESDIA-$ARCH.iso"
isolinux_files="chain.c32 isolinux.bin ldlinux.c32 libutil.c32 reboot.c32 menu.c32 vesamenu.c32 isohdpfx.bin isolinux.cfg libcom32.c32 poweroff.c32"
#KERNEL=$LFS/boot/vmlinuz-5.9.0-rc3-chilios
#INITRD=$LFS/boot/initrd-5.9.0-rc3-chilios.img
KERNEL=$LFS/boot/vmlinuz-5.0.7-chilios
INITRD=$LFS/boot/initrd-5.0.7-chilios.img
DESTKERNEL=$TEMPDIR/boot/vmlinuz
DESTINITRD=$TEMPDIR/boot/initrd
COMPRESSION="gzip"
CREATESFS=1

# $1: message string
_msg_info() {
	local _msg="${1}"
	[[ "${quiet}" == "y" ]] || printf '[%s] INFO: %s\n' "${app_name}" "${_msg}"
}

# $1: message string
_msg_warning() {
    local _msg="${1}"
    printf '[%s] WARNING: %s\n' "${app_name}" "${_msg}" >&2
}

# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
    local _msg="${1}"
    local _error=${2}
    printf '[%s] ERROR: %s\n' "${app_name}" "${_msg}" >&2
    if (( _error > 0 )); then
        exit "${_error}"
    fi
}

function sh_ambiente()
{
	log_wait_msg "Criando diretorio temporario $TEMPDIR"
	#rm -fr $TEMPDIR
	mkdir -p $TEMPDIR/{filesystem,isolinux,boot,boot/grub,efi/boot}

	#log_wait_msg "Copiando alguns necessarios arquivos..."
	#for file in $isolinux_files; do
	#	cp $ISOLINUXDIR/$file $TEMPDIR/isolinux
	#done
	#cp $ISOLINUXDIR/efiboot.img $TEMPDIR/isolinux
	#cp livecd/efi/boot/bootx64.efi $TEMPDIR/efi/boot

	echo "$DISTRONAME" > $TEMPDIR/isolinux/venomlive
	[ -d livecd/virootfs ] && cp -aR livecd/virootfs $TEMPDIR

	log_wait_msg "Copiando kernel $KERNEL to $DESTKERNEL"
	cp -f $KERNEL $TEMPDIR/boot/vmlinuz
	#rm -f $LFS/boot/vmlinuz

	log_wait_msg "Copiando initrd $INITRD to $DESTINITRD"
	cp -f $INITRD $TEMPDIR/boot/initrd
	#cp -f $INITRD $LFS/boot/
	#rm -f $LFS/boot/initrd

	#pushd $LFS/boot &>/dev/null
	#ln -sf vmlinuz-$(uname -r) vmlinuz
	#ln -sf initrd-$(uname -r).img initrd
	#popd &>/dev/null
}

function sh_mksquashfs()
{
	log_wait_msg "Removendo OLD file squashfs root.sfs..."
	rm -f $TEMPDIR/filesystem/root.sfs

	case $COMPRESSION in
		gzip)	mksquashfs $LFS $TEMPDIR/filesystem/root.sfs -noappend -ef exclude_dir -comp gzip -Xcompression-level 1;;
		xz)	mksquashfs $LFS $TEMPDIR/filesystem/root.sfs -noappend -ef exclude_dir -b 1048576 -comp xz -Xdict-size 100%;;
		zstd)	mksquashfs $LFS $TEMPDIR/filesystem/root.sfs -noappend -ef exclude_dir -b 1M -comp zstd -Xcompression-level 1;;
		lzma)	mksquashfs $LFS $TEMPDIR/filesystem/root.sfs -noappend -ef exclude_dir -b 1M -comp lzma;;
	   lz4)	mksquashfs $LFS $TEMPDIR/filesystem/root.sfs -noappend -ef exclude_dir -b 1M -comp lz4 -Xhc;;
   esac
}

function sh_mkiso()
{
	log_wait_msg "Excluindo .iso antigo..."
	rm -f $OUTPUT_ISO
	log_wait_msg "Criando iso $OUTPUT_ISO..."

	#MBR
	#xorriso -as mkisofs                                 \
	#		-r -J -joliet-long                          \
	#		-l -cache-inodes                            \
	#		-isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	#		-partition_offset 16                        \
	#       -iso-level 3                                \
	#		-volid "${LABEL}"                           \
	#		-b isolinux/isolinux.bin                    \
	#		-c isolinux/boot.cat                        \
	#		-no-emul-boot                               \
	#		-boot-load-size 4                           \
	#		-boot-info-table                            \
	#		-o $OUTPUT_ISO                              \
	#		$TEMPDIR

	#hibrido MBR/EFI
	# "-boot-load-size 4 -boot-info-table" deve ser escrito antes de "-eltorito-alt-boot", porque eles servem como opções de modificação para "-b". 
	# Depois de "-eltorito-alt-boot" vem o reino de "-e". 
	# Lá você precisa de outra opção "-no-emul-boot" (como em "-b") para evitar a mensagem de erro sobre tamanhos de emulação de disquete. 
	# Mas não use "-boot-load-size" ou "-boot-info-table" para a imagem EFI
	#xorriso -as mkisofs -r                              \
	#		-J -l -b isolinux/isolinux.bin             \
	#		-c isolinux/boot.cat                        \
	#		-no-emul-boot                               \
	#		-isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	#       -eltorito-alt-boot                          \
	#		-no-emul-boot                               \
	#       -e isolinux/efiboot.img                     \
	#       -no-emul-boot                               \
	#        -isohybrid-gpt-basdat                       \
	#		-volid "${LABEL}"                           \
	#		-o $OUTPUT_ISO                              \
	#		$TEMPDIR

   #xorriso -as mkisofs \
   #  -o $OUTPUT_ISO \
   #  -isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
   #  -c isolinux/boot.cat \
   #  -b isolinux/isolinux.bin \
   #   -no-emul-boot -boot-load-size 4 -boot-info-table \
   #  -eltorito-alt-boot \
   #  -e isolinux/efi.img \
   #   -no-emul-boot \
   #   -isohybrid-gpt-basdat \
   #   $TEMPDIR

	xorriso -as mkisofs \
	  -o out/$OUTPUT_ISO \
	  -isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	  -c isolinux/boot.cat \
	  -c isolinux/boot.cat \
	  -b isolinux/isolinux.bin \
	  -no-emul-boot -boot-load-size 4 -boot-info-table \
	  -eltorito-alt-boot \
	  -e isolinux/efi.img \
     -no-emul-boot \
     -isohybrid-gpt-basdat \
		-iso-level 3 \
		-full-iso9660-filenames \
		-joliet \
		-joliet-long \
		-rational-rock \
		-volid "${VOL_ID}" \
	  $TEMPDIR

	#rm -fr $TEMPDIR
	log_success_msg2 "Arquivo iso $PWD/out/$OUTPUT_ISO criado com sucesso!"
}

function init()
{
   local param=$@
   local s

   case "${1}" in
      --no)    CREATESFS=0;;
      --yes)	CREATESFS=1;;
      *) 	  	shift;help "$@";;
   esac
}

function usage()
{
   echo -e "${cyan}Most used commands: ${0##*/}"
   echo -e "   -h, display this help and exit"
   echo -e "   -n, NAO cria squashfs, usa antigo"
   echo -e "   -y, cria novo squashfs"
   echo -e "   -x, usa compression XZ"
   echo -e "   -z, usa compression ZSTD"
   echo -e "   -g, usa cmpression GZIP (default0"
	exit 1
}

#if [[ $1 = "" ]] || [[ $1 = "-h" ]] || [[ $1 = "--help" ]] || [[ $1 = "help" ]] || [[ $1 = "-help" ]]; then
#   help
#fi

while getopts "yYnNhHxXzZgG" o; do
    case "${o}" in
    	y|Y)		CREATESFS=1;;
      n|N)		CREATESFS=0;;
      x|X)		COMPRESSION="xz";;
      z|Z) 		COMPRESSION="zstd";;
      g|G) 		COMPRESSION="gzip";;
      *|h|H)	usage;;
    esac
done
shift $((OPTIND-1))

if (( EUID != 0 )); then
	_msg_error "${app_name} must be run as root." 1
fi

#init $*
sh_ambiente
if (( $CREATESFS )); then
	sh_mksquashfs
else
	log_wait_msg "Pulando filesystem squashfs..."
fi
sh_mkiso


