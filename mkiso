#!/bin/bash
#usermod -d /home/new_user -m user
#usermod -l new_user user

#debug
#export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

#global system
_VERSION_='1.60.20230725'
DEPENDENCIES=(printf tput xorriso mksquashfs stat whiptail)
_APP_="${0##*/}"
CREATESFS=1
declare -g TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
declare -g CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}$white]"
declare -g BOOTLOG="/tmp/$APP-$(sh_diahora).log"
declare -g LOGGER='/dev/tty8'
declare -gi quiet=0
declare -g use_color=1
declare -gi contador=0
declare -gi njobs=1

trap "exit 1" SIGHUP SIGINT SIGQUIT SIGTERM
set -e

function sh_configure {
	##########################################################
	declare -g distro_name='CHILI'
	declare -g lfs_version='live'
	declare -g lfs_root='/lfs'
	declare -g lfs_basename='chili'
	##########################################################
	declare -g kernel_version='6.1.28-lts-chili'
	if [[ ! -d "$lfs_root/$lfs_basename" ]]; then
		die "$lfs_root/$lfs_basename não existe"
	fi
	sh_choosekernel
	##########################################################
	declare -g COMPRESSION="gzip"
	declare -g ARCH="x86_64"
	declare -g ORIGEM="$lfs_root/$lfs_basename"
	declare -g LOCALDIR="$PWD"
	declare -g TEMPDIR="/livecd/live/$lfs_basename"
	declare -g ISOLINUXDIR="$LOCALDIR/isolinux"
	declare -g date_ym=$(date +"%Y%m")
	declare -g date_ymd=$(date +"%Y.%m.%d")
	declare -g VOL_ID="${distro_name}_${date_ym}"
	declare -g OUTPUT_ISO="$distro_name-$lfs_version-$lfs_basename-$kernel_version-$date_ymd-$ARCH.iso"
	#isolinux_files="chain.c32 isolinux.bin ldlinux.c32 libutil.c32 reboot.c32 menu.c32 vesamenu.c32 isohdpfx.bin isolinux.cfg libcom32.c32 poweroff.c32 efi.img chili10.jpg"
	declare -g KERNEL="${ORIGEM}/boot/vmlinuz-$kernel_version"
	declare -g INITRD="${ORIGEM}/boot/initrd-$kernel_version.img"
	declare -g DESTKERNEL="$TEMPDIR/boot/vmlinuz"
	declare -g DESTINITRD="$TEMPDIR/boot/initrd"
}

function sh_diahora {
	local DIAHORA=$(date +"%d%m%Y-%T")
	local DIAHORA=${DIAHORA//:/}
	printf "%s\n" "$DIAHORA"
}

die() {
	printf "${red}$CROSS ${pink}%03d/%03d => ${red}$(gettext "FATAL:") %s\n\033[m" "$ncontador" "$njobs" "$@"
	exit 1
}

function sh_setvarcolors {
    sh_check_terminal
    if ((use_color)); then
        bold=$(tput bold)
        red=$(tput bold)$(tput setaf 196)
        reset=$(tput sgr0)
        pink=$(tput setaf 5)
        yellow=$(tput bold)$(tput setaf 3)
        green=$(tput bold)$(tput setaf 2)
        cyan=$(tput setaf 6)
    else
        unset bold red reset pink yellow green cyan
    fi
}

function sh_make_dir_layout {
	local LFS=$lfs_root/$lfs_basename

	set +e
	mkdir -pv $LFS/{etc,var} $LFS/usr/{bin,lib,sbin}

	for i in bin lib sbin; do
	  ln -sv usr/$i $LFS/$i
	done

	case $(uname -m) in
	  x86_64) mkdir -pv $LFS/lib64 ;;
	esac
	set -e
}

function sh_choosekernel {
	local array=()
	local ARRAY=()
	local sep="\xe2\x94\x82"
	local nc=0
	local n=0

	mapfile -t ARRAY <<<"$(find $lfs_root/$lfs_basename/boot/ -iname 'vmlinuz*')"
	for key in "${ARRAY[@]}"; do
		filename=${key##*/}
		array+=("$filename" "$(printf "$sep%-s" "$(file "$key")")")
	done
	xkernel=$(dialog \
		--default-item vmlinuz-$kernel_version \
		--stdout \
		--clear \
		--colors \
		--menu "Kernel's in $lfs_root/$lfs_basename" \
		0 0 25 "${array[@]}")

	exit_status=$?
	case $exit_status in
	1 | 255)
		echo "Cancelled!"
		exit 1
		;;
	esac
	kernel_version="${xkernel#*-}"
}

function sh_maxcol {
	COLUMNS=$(stty size)           # Obtém as dimensões do terminal usando o comando "stty size" e armazena o resultado na variável "COLUMNS".
	COLUMNS=${COLUMNS##* }         # Usa a expansão de parâmetro para obter apenas o número de colunas do resultado obtido em "COLUMNS".
	((COLUMNS <= 0)) && COLUMNS=80 # Verifica se o número de colunas é menor ou igual a 0. Se for, atribui o valor padrão de 80 colunas.
	echo $COLUMNS                  # Exibe o número de colunas (tamanho máximo) no terminal.
}

function replicate {
	local Var
	printf -v Var %"$2"s " "
	echo "${Var// /$1}"
}

function sh_setvarcolors {
	if tput setaf 1 &>/dev/null; then
		tput sgr0 # reset colors
		#bold=$(tput bold);
		reset=$(tput sgr0)
		#blue=$(tput setaf 33);
		cyan=$(tput setaf 37)
		green=$(tput setaf 2)
		orange=$(tput setaf 166)
		#purple=$(tput setaf 125);
		red=$(tput setaf 124)
		#violet=$(tput setaf 61);
		white=$(tput setaf 15)
		yellow=$(tput setaf 136)
		pink=$(tput setaf 129)
		#black=$(tput setaf 0);
	else
		#bold='';
		reset="\e[0m"
		reset="\e[0m"
		#blue="\e[1;34m";
		cyan="\e[1;36m"
		green="\e[1;32m"
		orange="\e[1;33m"
		#purple="\e[1;35m";
		red="\e[1;31m"
		#violet="\e[1;35m";
		white="\e[1;37m"
		yellow="\e[1;33m"
		pink="\033[35;1m"
		#black="\e[1;30m";
	fi
}

function sh_msg_info {
	local _msg="${1}"
	((quiet)) || printf "[%s] ${yellow}INFO${reset}: %s\n" "${red}${_APP_}${reset}" "${_msg}"
}

function sh_msg_warning {
	local _msg="${1}"
	printf '[%s] WARNING: %s\n' "${_APP_}" "${_msg}" >&2
}

function sh_msg_error {
	local _msg="${1}"
	local _error="${2}"
	printf '[%s] ERROR: %s\n' "${_APP_}" "${_msg}" >&2
	if ((_error > 0)); then
		exit "${_error}"
	fi
}

function sh_ambiente {
	local lnotexist=0
	replicate '#' "$(sh_maxcol)"
	sh_msg_info "Criando ISO: ${cyan}$OUTPUT_ISO${reset}"
	sh_msg_info "ISO LABEL  : ${cyan}$VOL_ID${reset}"
	sh_msg_info "ISO ORIGEM : ${cyan}$ORIGEM${reset}"
	sh_msg_info "DESTINO    : ${cyan}$TEMPDIR/filesystem/root.sfs${reset}"

	sh_msg_info "Criando diretorio temporario $TEMPDIR"
	[[ -d "$TEMPDIR" ]] || lnotexist=1
	[[ -d "$TEMPDIR" ]] || mkdir -p "$TEMPDIR"/{filesystem,isolinux,boot,boot/grub,efi/boot}

	sh_msg_info "Copiando alguns necessarios arquivos..."
	#	for file in $isolinux_files; do
	#		cp $ISOLINUXDIR/$file $TEMPDIR/isolinux
	#	done
	#	cp $ISOLINUXDIR/efiboot.img $TEMPDIR/isolinux
	#	cp $LOCALDIR/model/efi/boot/bootx64.efi $TEMPDIR/efi/boot

	if ((lnotexist)); then
		cp -rpn "$LOCALDIR"/model/. "$TEMPDIR"/.
	fi

	echo "$distro_name" >"$TEMPDIR/isolinux/venomlive"
	[ -d livecd/virootfs ] && cp -aR livecd/virootfs "$TEMPDIR"

	sh_msg_info "Copiando kernel $KERNEL to $DESTKERNEL"
	cp -f "$KERNEL" "$TEMPDIR/boot/vmlinuz"

	sh_msg_info "Copiando initrd $INITRD to $DESTINITRD"
	cp -f "$INITRD" "$TEMPDIR/boot/initrd"
	replicate '#' "$(sh_maxcol)"
}

function sh_info {
	whiptail \
		--fb \
		--title "[debug]$0" \
		--backtitle "[debug]$0" \
		--yesno "${*}\n" \
		0 0
	result=$?
	if ((result)); then
		exit
	fi
	return $result
}

function sh_mksquashfs {
	if [[ -e "$TEMPDIR/filesystem/root.sfs" ]]; then
		sh_msg_info "Removendo OLD file squashfs root.sfs..."
		rm -f $TEMPDIR/filesystem/root.sfs
	fi

	#	info "  ORIGEM : $ORIGEM\n" "DESTINO : $TEMPDIR/filesystem/root.sfs"

	case $COMPRESSION in
	gzip) mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -comp gzip -Xcompression-level 1 ;;
	xz) mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1048576 -comp xz -Xdict-size 100% ;;
	zstd) mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1M -comp zstd -Xcompression-level 1 ;;
	lzma) mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1M -comp lzma ;;
	lz4) mksquashfs "$ORIGEM" "$TEMPDIR/filesystem/root.sfs" -noappend -ef exclude_dir -b 1M -comp lz4 -Xhc ;;
	esac
}

function sh_domkiso {
	if ((CREATESFS)); then
		sh_mksquashfs
	else
		if ! [[ -e "$TEMPDIR/filesystem/root.sfs" ]]; then
			sh_msg_info "filesystem squashfs nao localizado, reconstruindo..."
			sh_msg_info
		else
			sh_msg_info "Pulando filesystem squashfs..."
		fi
	fi
	sh_mkiso
}

function sh_mkiso {
	[[ ! -d "out" ]] && { mkdir -p out; }
	[[ -e "$OUTPUT_ISO" ]] && {
		sh_msg_info "Excluindo .iso antigo..."
		rm -f "$OUTPUT_ISO"
	}
	sh_msg_info "Criando iso $OUTPUT_ISO..."

	#MBR
	#xorriso -as mkisofs                                 \
	#		-r -J -joliet-long                          \
	#		-l -cache-inodes                            \
	#		-isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	#		-partition_offset 16                        \
	#       -iso-level 3                                \
	#		-volid "${VOL_ID}"                           \
	#		-b isolinux/isolinux.bin                    \
	#		-c isolinux/boot.cat                        \
	#		-no-emul-boot                               \
	#		-boot-load-size 4                           \
	#		-boot-info-table                            \
	#		-o $OUTPUT_ISO                              \
	#		$TEMPDIR

	#hibrido MBR/EFI
	# "-boot-load-size 4 -boot-info-table" deve ser escrito antes de "-eltorito-alt-boot", porque eles servem como opções de modificação para "-b".
	# Depois de "-eltorito-alt-boot" vem o reino de "-e".
	# Lá você precisa de outra opção "-no-emul-boot" (como em "-b") para evitar a mensagem de erro sobre tamanhos de emulação de disquete.
	# Mas não use "-boot-load-size" ou "-boot-info-table" para a imagem EFI
	#xorriso -as mkisofs -r                              \
	#		-J -l -b isolinux/isolinux.bin             \
	#		-c isolinux/boot.cat                        \
	#		-no-emul-boot                               \
	#		-isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	#       -eltorito-alt-boot                          \
	#		-no-emul-boot                               \
	#       -e isolinux/efiboot.img                     \
	#       -no-emul-boot                               \
	#        -isohybrid-gpt-basdat                       \
	#		-volid "${VOL_ID}"                           \
	#		-o $OUTPUT_ISO                              \
	#		$TEMPDIR

	#xorriso -as mkisofs \
	#  -o $OUTPUT_ISO \
	#  -isohybrid-mbr $ISOLINUXDIR/isohdpfx.bin    \
	#  -c isolinux/boot.cat \
	#  -b isolinux/isolinux.bin \
	#   -no-emul-boot -boot-load-size 4 -boot-info-table \
	#  -eltorito-alt-boot \
	#  -e isolinux/efi.img \
	#   -no-emul-boot \
	#   -isohybrid-gpt-basdat \
	#   $TEMPDIR

#	xorriso -as mkisofs \
#		-o "out/$OUTPUT_ISO" \
#		-isohybrid-mbr "$ISOLINUXDIR/isohdpfx.bin" \
#       -eltorito-catalog isolinux/boot.cat \
#       -eltorito-boot isolinux/isolinux.bin \
#		-no-emul-boot \
#		-boot-load-size 4 \
#		-boot-info-table \
#		-eltorito-alt-boot -e isolinux/efi.img \
#		-no-emul-boot \
#		-isohybrid-gpt-basdat \
#		-iso-level 3 \
#		-full-iso9660-filenames \
#		-joliet \
#		-joliet-long \
#		-rational-rock \
#		-volid "${VOL_ID}" \
#		$TEMPDIR

		xorriso \
            -as mkisofs \
            -iso-level 3 \
            -rock \
            -joliet \
            -max-iso9660-filenames \
            -omit-period \
            -omit-version-number \
            -relaxed-filenames \
            -allow-lowercase \
            -eltorito-catalog isolinux/boot.cat \
            -eltorito-boot isolinux/isolinux.bin \
            -no-emul-boot \
            -boot-load-size 4 \
            -boot-info-table \
            -eltorito-alt-boot -e isolinux/efi.img \
            -isohybrid-gpt-basdat \
            -no-emul-boot \
            -isohybrid-mbr "$ISOLINUXDIR"/isohdpfx.bin \
			-o "out/$OUTPUT_ISO" \
            -volid "$VOL_ID" \
            "$TEMPDIR"

	#rm -fr $TEMPDIR
	sh_msg_info "Arquivo iso ${red}$PWD/out/$OUTPUT_ISO${reset} criado com sucesso!"
}

function sh_usage {
	echo -e "${orange}uso${green}:${white}  ${_APP_} ${green}<${white}operação${green}> [${white}...${green}]${reset}"
	echo -e "operações:"
	echo -e "${pink}  -h${cyan}, display this help and exit"
	echo -e "${pink}  -n${cyan}, NAO cria squashfs, usa antigo"
	echo -e "${pink}  -y${cyan}, cria novo squashfs"
	echo -e "${pink}  -x${cyan}, usa compression XZ"
	echo -e "${pink}  -z${cyan}, usa compression ZSTD"
	echo -e "${pink}  -g${cyan}, usa cmpression GZIP (default)"
	echo -e "${pink}  -q${cyan}, quiet"
	exit 1
}

function sh_check_deps {
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}ERRO${reset}: não encontrei o comando ${orange}'$d'${reset}"
	done
	#[[ ${#missing[@]} -ne 0 ]]
	if ((errorFound)); then
		erro "#### IMPOSSÍVEL CONTINUAR ####"
		msg "Esse script precisa dos comandos listados acima" >&2
		msg "Instale-os e/ou verifique se estão no seu \$PATH" >&2
		exit 1
	fi
}

function sh_init {
	sh_setvarcolors
	sh_check_deps

	if [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]] || [[ "$1" = "help" ]] || [[ "$1" = "-help" ]]; then
		sh_usage
	fi

	while getopts "yYnNhHxXzZgGqQ" o; do
		case "${o}" in
		q | Q) quiet=1 ;;
		y | Y) CREATESFS=1 ;;
		n | N) CREATESFS=0 ;;
		x | X) COMPRESSION="xz" ;;
		z | Z) COMPRESSION="zstd" ;;
		g | G) COMPRESSION="gzip" ;;
		h | H) sh_usage ;;
		*) sh_usage ;;
		esac
	done
	shift $((OPTIND - 1))

	if ((EUID != 0)); then
		sh_msg_error "${_APP_} must be run as root." 1
	fi

	sh_setvarcolors
	sh_configure
	sh_make_dir_layout
	sh_ambiente
	sh_domkiso
}

sh_init "$@"
